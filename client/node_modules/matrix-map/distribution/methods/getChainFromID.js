"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _getIterator2 = require("babel-runtime/core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _set = require("babel-runtime/core-js/set");

var _set2 = _interopRequireDefault(_set);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getChainFromID = function getChainFromID(id) {
    var _this = this;

    var toBeDestroyed = new _set2.default();

    var alreadyChecked = new _set2.default();

    var playChain = function playChain(pos) {
        var targetID = pos;

        var loopSet = new _set2.default();

        alreadyChecked.add(targetID);

        toBeDestroyed.add(targetID);

        var targetNeighbors = _this.getEquivalentNeighbors(targetID);

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = (0, _getIterator3.default)(targetNeighbors), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _step$value = (0, _slicedToArray3.default)(_step.value, 2),
                    key = _step$value[0],
                    value = _step$value[1];

                if (targetNeighbors.get(key) === _this.map.get(targetID)) {
                    loopSet.add(key);
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        loopSet.forEach(function (item) {
            if (!alreadyChecked.has(item)) {
                playChain(item);
            }
        });
    };

    playChain(id);

    // console.log('TBD', toBeDestroyed.size);


    return toBeDestroyed;
};

exports.default = getChainFromID;