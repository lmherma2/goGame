'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _index = require('./methods/index');

var index = _interopRequireWildcard(_index);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Matrix = function Matrix(size) {
    (0, _classCallCheck3.default)(this, Matrix);
    this.setValueOfID = index.setValueOfID;
    this.getValueOfID = index.getValueOfID;
    this.fillEmptyValues = index.fillEmptyValues;
    this.deleteValueOfID = index.deleteValueOfID;
    this.getNorthEdge = index.getNorthEdge;
    this.getEastEdge = index.getEastEdge;
    this.getSouthEdge = index.getSouthEdge;
    this.getWestEdge = index.getWestEdge;
    this.getAllEdges = index.getAllEdges;
    this.getNorthNeighbor = index.getNorthNeighbor;
    this.getSouthNeighbor = index.getSouthNeighbor;
    this.getEastNeighbor = index.getEastNeighbor;
    this.getWestNeighbor = index.getWestNeighbor;
    this.getNeighbors = index.getNeighbors;
    this.getEquivalentNeighbors = index.getEquivalentNeighbors;
    this.destroyChainFromID = index.destroyChainFromID;
    this.getChainFromID = index.getChainFromID;
    this.replaceChainFromID = index.replaceChainFromID;
    this.display = index.display;
    this.displayPretty = index.displayPretty;
    this.dropDown = index.dropDown;
    this.createMap = index.createMap;
    this.convertToSquareBoard = index.convertToSquareBoard;
    this.getAsItterator = index.getAsItterator;
    this.hasEquivalentNeighbors = index.hasEquivalentNeighbors;
    this.resetMatrix = index.resetMatrix;
    this.getNorthEastNeighbor = index.getNorthEastNeighbor;
    this.getNorthWestNeighbor = index.getNorthWestNeighbor;
    this.getSouthWestNeighbor = index.getSouthWestNeighbor;
    this.getSouthEastNeighbor = index.getSouthEastNeighbor;

    this.size = size;
    this.createMap();
    this.getAllEdges();
    this.getAsItterator();
};

exports.default = Matrix;